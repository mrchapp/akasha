#!/usr/bin/env php
<?php
$include_dirs = array(get_include_path(), __DIR__, "/etc/akasha", "/usr/lib/akasha");
set_include_path(implode(PATH_SEPARATOR, $include_dirs));

require_once("classes/WinkUtils.class.php");
@include_once("config.php");

// You can set your user here:
//$user = 'user@example.com';

// If you want the JSON response for your devices
// somewhere in a file, set this to true:
$DUMP_JSON = true;

// Get devices
function get_devices($bearer)
{
	global $DUMP_JSON;

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, "https://api.wink.com/users/me/wink_devices");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HEADER, FALSE);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array("Authorization: Bearer " . $bearer));
	$response = curl_exec($ch);
	$ret_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	curl_close($ch);
	if ($ret_code >= 400)
		return false;

	if ($DUMP_JSON && ($fh = fopen("devices.json", "w")))
	{
		fprintf($fh, $response);
		fclose($fh);
	}

	$json = json_decode($response, true);
	return $json;
}

// From https://dasprids.de/blog/2008/08/22/getting-a-password-hidden-from-stdin-with-php-cli/
function get_password($stars = false)
{
	// Get current style
	$oldStyle = shell_exec('stty -g');

	if ($stars === false)
	{
		shell_exec('stty -echo');
		$password = rtrim(fgets(STDIN), "\n");
	} else {
		shell_exec('stty -icanon -echo min 1 time 0');

		$password = '';
		while (true)
		{
			$char = fgetc(STDIN);

			if ($char === "\n")
			{
				echo PHP_EOL;
				break;
			} else if (ord($char) === 127) {
				if (strlen($password) > 0)
				{
					fwrite(STDOUT, "\x08 \x08");
					$password = substr($password, 0, -1);
				}
			} else {
				fwrite(STDOUT, "*");
				$password .= $char;
			}
		}
	}

	// Reset old style
	shell_exec('stty ' . $oldStyle);

	// Return the password
	return $password;
}

@$access_token = $config["wink"]["token_access"];
@$refresh_token = $config["wink"]["token_refresh"];
if (!@$access_token || !($json = get_devices($access_token)))
{
	if (!isset($user))
	{
		echo "Enter Wink user (mail such as user@example.com): ";
		$user = trim(fgets(STDIN));
	}

	echo "Enter Wink password for $user: ";
	$pass = get_password(true);

	$client_id = "quirky_wink_android_app";
	$client_secret = "e749124ad386a5a35c0ab554a4f2c045";

	// Get tokens
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, "https://api.wink.com/oauth2/token");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HEADER, FALSE);
	curl_setopt($ch, CURLOPT_POST, TRUE);
	curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"client_id\": \"$client_id\",\n    \"client_secret\": \"$client_secret\",\n    \"username\": \"$user\",\n    \"password\": \"$pass\",\n    \"grant_type\": \"password\"\n}");
	curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));
	$response = curl_exec($ch);
	$ret_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	curl_close($ch);
	if ($ret_code >= 400)
	{
		echo "Wrong username/password." . PHP_EOL;
		exit(1);
	}
	$json = json_decode($response, true);

	$access_token = $json['data']['access_token'];
	$refresh_token = $json['data']['refresh_token'];

	if (!($json = get_devices($access_token)))
	{
		echo "Could not fetch a list of devices." . PHP_EOL;
		exit(1);
	}
}

$config_content  = '<?php' . PHP_EOL;
$config_content .= 'require_once("classes/WinkUtils.class.php");' . PHP_EOL;
$config_content .= PHP_EOL;
$config_content .= '$config = array();' . PHP_EOL;
$config_content .= '$config["wink"]["token_access"] =  "' . $access_token  . "\";" . PHP_EOL;
$config_content .= '$config["wink"]["token_refresh"] = "' . $refresh_token . "\";" . PHP_EOL;
$config_content .= PHP_EOL;
$config_content .= '$wink_devices = array();' . PHP_EOL;

foreach($json['data'] as $element)
{
	$model_name = @$element['model_name'];
	$name = @$element['name'];
	$name = str_replace(" ", "", $name);
	$has_parent = array_key_exists('parent_object_id', $element);
	$upc_code = @$element['upc_code'];
	$idfield = "";
	$id = "";
	$type = "";

	if ($has_parent != "")
	{
		// What's it doing at this level??
		continue;
	}

	// Workaround: This thermostat does not have
	// model_name.
	if ($upc_code == 'generic_zwave_thermostat')
	{
		$model_name = $upc_code;
	}

	$tidf_arr = WinkUtils::get_info_from_model($model_name);
	$type = $tidf_arr["type"];
	$idfield = $tidf_arr["idfield"];

	if (array_key_exists($idfield, $element))
	{
		$id = $element[$idfield];
		$config_content .= '$wink_devices[] = WinkUtils::new_device("' . $model_name . '", ' . $id .', "' . $name . '");' . PHP_EOL;
	} else {
		$config_content .= "//Unknown device type \"$model_name\", named \"$name\"" . PHP_EOL;
	}
}

$config_content .= '?>' . PHP_EOL;

echo $config_content;
if ($fh = fopen("config-new.php", "w"))
{
	fprintf($fh, $config_content);
	fclose($fh);
}
?>
